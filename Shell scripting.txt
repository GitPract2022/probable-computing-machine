===========Shell scripting============

echo $0 ---which shell running
cat /etc/shell -- contains path of shell

./filename.sh --- to run the scripts

echo $PATH

#!/bin/bash

===========if elif fi / Loop===========
if [some_condition_is_true]
then
    //execute this code
elif [some_other_condition_is_true]
then
   //execute_this_code
else
   //execute_this_code
fi

-------------------
$1 and $2 denote the first and second command line argument passed, respectively
$# Denotes the number of command line arguments or positional parameters
The $# refers to the number of parameters received at run time, not a specific parameter. $1 gets replaced by whatever was in location 1 on the command line when the script was executed.

$? last command value
------------------------

====varialble====
os=linux
distro="MX Linux"
age=33

echo $os
echo $distro
echo $age
echo "The value of \$os is $os"

set | grep distro
unset distro

enviornment variable
$USER
$HOME
$PATH

--------------
#!/bin/bash
filename="/etc/passwd"
echo "Number of lines:"
wc -l $filename
echo "First 5 lines:"
head -n 5 $filename

echo "Last 5 lines:"
tail -n 5 $filename
-----------------------

================For / Loop================

for item in LIST
do
  commands
done

//LIST can be a series of strings seperated by spaces, a range of numbers, output of a command, an array, and so on.


for item in ./*
do
	if [[ -f "$item" ]]
	then
		echo "Displaying the contents of $item"
		cat $item
		sleep 1
		echo "#######################"
	fi
done

/home/katana

-----------------------------
#!/bin/bash

for((i=0;i<=10;i++))
do
echo "i = $i"
done
-------------------------
#!/bin/bash

for file in *.txt
	do
		mv "$file" "renamed_by_script_$file"
	done
-----------------------------
#!/bin/bash

for file in /home/katan/*.txt
	do
		mv "$file" "renamed_by_script_$file"
	done
-----------------------------


===============Nested if elif fi======================
#!/bin/bash

read -p "Enter your age:" age
if [[ $age -le 18 && $age -ge 0]]
then
	echo "You are Minor!"
elif [[ $age -eq 18]]
then
	echo "Congrulations, you've just become major!"
elif [[ $age -ge 18 && $age -le 100]]
then
	echo "You are major"
else
	echo "Invalid age!"

fi
-------------------------------------------------------
#!/bin/bash

if [[ $# -eq 1]]
then
  if [[ -f "$1" ]]
  then
	echo "The argument is a file. displaying its content..."
	sleep1
	cat $1
  elif [[ -d "$1" ]]
  then
 	echo "The argument is a directory, running ls -l ..."
 	sleep 1
 	ls -l $1
  else 
	echo "The argument ($1) is neither a file nor a directory."
  fi
else
	echo "The script should be run with an argument"
fi
-----------------------------------------------------------

======User Input=======
read name
echo $name
read -p "Enter the IP address" ip
echo $ip
read -s -p "Enter the password" pswd ---- -s not echoing the input
echo $pswd
----------------------------------

#!/bin/bash

my_str="abc"

if [[ -z "$my_str" ]];then
	echo "String is ZERO length."
else
 	echo "String is NOT zero length."
fi

if [[ -n "$my_str"]];then
	echo "String is not Zero length."
else
	echo "String is zero length"
fi
----------------------------------------
-n ---the length of string is nonzero
-z ---the length of string is zero

.string1.sh.swp

============While loop===============

while CONDITION
do
   COMMANDS
done
-------------------------------
i=0
while [[ i -lt 10 ]]
do
	echo " i: $"
	((i++)) #let i=i+1
done
--------------------------------
while true  -- condition is true
--------------------------------

while :
do 
	output="$(pgrep -l $1)"
	if [[ -n "$output" ]];then
		echo "The proccess \"$1\" is running."
	else
		echo "The proccess \"$1\" is NOT running."
	fi
	sleep 3
done
--------------------------------
systemctl status sshd
pgrep sshd
sudo systemctl stop ssh
sudo systemctl start ssh
---------------------------------
================CASE statement==================

Case in bash = Switch in c++ / java

case EXPRESSION in
PATTERN_1)
 STATEMENTS
;;
PATTERN_2)
 STATEMENTS
;;
*)
 STATEMENTS
;;
esac
--------------------------------
kill -l
sleep 1001 &
pgrep sleep
------------------------------
if [[ $# -ne 2 ]];then
	echo "Run the script with 2 arguments: Signal and PID."
	exit
fi
case "$1" in
	1)
		echo "Sending the SIGHUP signal to $2"
		kill -SIGHUP $2
		;;
	2)
		echo "Sending the SIGINT Signal to $2"
		kill -SIGINT $2
		;;
	3)
		echo "Sending the SIGTERM signal to $2"
		kill -15 $2
		;;
	*)
		echo "Signal number $1 will not be delivered!"
		;;
esac
-------------------------------------------------------------
=====Bash Menu (Select)=======

select ITEM in LIST
do
  COMMANDS
done
--------------------------------
PS3="Choose your country:"
select COUNTRY in Germany France "U K"
do
	echo "COUNTRY is $COUNTRY"
	echo "REPLY is $REPLY"
done
---------------------------------
PS3="Choose your country:"
select COUNTRY in Germany France "U K" Quit
do
	case $REPLY in
	1)
		echo "You speak German."
		;;
	2)
		echo  "You speak French."
		;;
	3)
		echo "You speak British English."
		;;
	4)
		echo "Quitting..."
		break
		;;
	*)
		echo "Invalid option $RPELY"
		;;
	esac
----------------------------------------------
====================Functions===================
function print_something () {
	echo "I'm a simple function!"
}

display_something () {
	echo "Hello Functions!"
}

print_something
display_something
------------------------------------------------

create_files () {
	echo "Creating $1"
	touch $1
	chmod 400 $1
	echo "Creating $2"
	touch $2
	chmod 455 $2
	return 10
}
Create_files aa.txt bb.txt
echo $?

function lines_in_file () {
	grep -c "$1" "$2"
}
n=$(lines_in_file "usb" "/var/log/dmesg")
echo $n
---------------------------------------------------
# Bash comment
:set nu
set nu
---------------------------------------
bash_shebang_comments
#!/bin/bash
#!/usr/bin/python3
-----------------------------------
===========LAB 1 drop ip================
for ip in $( cat ips.txt )
do
	echo "Dropping packets from $ip"
	iptables -I INPUT -s $ip -j DROP
done
-----------------------------------------
===========LAB 2 Connection testing==========
output="$(ping -c 3 $1)"
#echo $output"

if [[ "$output" == *"100 packet loss"* ]];then
	echo "The network connection to $1 is not working."
else	
	echo "The network connection to $1 is working."
fi
----------------------------------------------------------
=============LAB 3 System Administartor script==============
#!/bin/bash
PS3="Your choice:"
select ITEM in "Add User" "List All Process" "Kill Process" "Install Program" "Quit"
do
if [[ $REPLY -eq 1 ]]
then
	read -p "Enter the username:" username
	output="$(grep -w $username /etc/passwd)"
	if [[ -n "$output" ]] #string is not zero length
	then	
		echo "The Username $username already exists."
	else
		sudo useradd -m -d /bin/bash "$username"
		if [[ $? -eq 0 ]]
		then
			echo "The user $user was added successfully."
			tail -n 1 /etc/passwd
		else
			echo "There was an error adding the user $username."
		if
	fi
elif [[ $REPLY -eq 2 ]]
then
	echo "Listing all processes..."
	sleep 1
	ps -ef
elif [[ $REPLY -eq 3 ]]
then
	read -p "Enter the process to kill:" process
	pkill $process
elif [[ $REPLY -eq 4 ]]
then
	read -p "Enter the program to install:" app
	sudo apt update & sudo apt install $app
elif [[ $REPLY -eq 5 ]]
then
	echo "Quitting..."
	sleep 1
	exit
else
	echo "Invalid menu selection."	
fi
done
---------------------------------------------------------------------











